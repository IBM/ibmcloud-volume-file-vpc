// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ibmcloud-volume-file-vpc/common/vpcclient/riaas"
	"github.com/IBM/ibmcloud-volume-file-vpc/common/vpcclient/vpcfilevolume"
)

type RegionalAPI struct {
	FileShareServiceStub        func() vpcfilevolume.FileShareManager
	fileShareServiceMutex       sync.RWMutex
	fileShareServiceArgsForCall []struct {
	}
	fileShareServiceReturns struct {
		result1 vpcfilevolume.FileShareManager
	}
	fileShareServiceReturnsOnCall map[int]struct {
		result1 vpcfilevolume.FileShareManager
	}
	LoginStub        func(string) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 string
	}
	loginReturns struct {
		result1 error
	}
	loginReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RegionalAPI) FileShareService() vpcfilevolume.FileShareManager {
	fake.fileShareServiceMutex.Lock()
	ret, specificReturn := fake.fileShareServiceReturnsOnCall[len(fake.fileShareServiceArgsForCall)]
	fake.fileShareServiceArgsForCall = append(fake.fileShareServiceArgsForCall, struct {
	}{})
	stub := fake.FileShareServiceStub
	fakeReturns := fake.fileShareServiceReturns
	fake.recordInvocation("FileShareService", []interface{}{})
	fake.fileShareServiceMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *RegionalAPI) FileShareServiceCallCount() int {
	fake.fileShareServiceMutex.RLock()
	defer fake.fileShareServiceMutex.RUnlock()
	return len(fake.fileShareServiceArgsForCall)
}

func (fake *RegionalAPI) FileShareServiceCalls(stub func() vpcfilevolume.FileShareManager) {
	fake.fileShareServiceMutex.Lock()
	defer fake.fileShareServiceMutex.Unlock()
	fake.FileShareServiceStub = stub
}

func (fake *RegionalAPI) FileShareServiceReturns(result1 vpcfilevolume.FileShareManager) {
	fake.fileShareServiceMutex.Lock()
	defer fake.fileShareServiceMutex.Unlock()
	fake.FileShareServiceStub = nil
	fake.fileShareServiceReturns = struct {
		result1 vpcfilevolume.FileShareManager
	}{result1}
}

func (fake *RegionalAPI) FileShareServiceReturnsOnCall(i int, result1 vpcfilevolume.FileShareManager) {
	fake.fileShareServiceMutex.Lock()
	defer fake.fileShareServiceMutex.Unlock()
	fake.FileShareServiceStub = nil
	if fake.fileShareServiceReturnsOnCall == nil {
		fake.fileShareServiceReturnsOnCall = make(map[int]struct {
			result1 vpcfilevolume.FileShareManager
		})
	}
	fake.fileShareServiceReturnsOnCall[i] = struct {
		result1 vpcfilevolume.FileShareManager
	}{result1}
}

func (fake *RegionalAPI) Login(arg1 string) error {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *RegionalAPI) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *RegionalAPI) LoginCalls(stub func(string) error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *RegionalAPI) LoginArgsForCall(i int) string {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RegionalAPI) LoginReturns(result1 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *RegionalAPI) LoginReturnsOnCall(i int, result1 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *RegionalAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fileShareServiceMutex.RLock()
	defer fake.fileShareServiceMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RegionalAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ riaas.RegionalAPI = new(RegionalAPI)
